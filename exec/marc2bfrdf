#!/usr/bin/env python

import os
import sys
import logging
import argparse

import rdflib
from amara.thirdparty import httplib2, json

from versa import I, VERSA_BASEIRI
from versa.driver import memory

from bibframe import BFZ, BFLC
from bibframe.reader import marc, marcxml
from bibframe.writer import rdf


#PREFIXES = {u'ma': 'http://www.loc.gov/MARC21/slim', u'me': 'http://www.loc.gov/METS/'}

#XXX: This refusal of rdflib to serialize without NS bindings set is really f@cking annoying [...to be fair seems not a problem for turtle output

BFNS = rdflib.Namespace(BFZ)
BFCNS = rdflib.Namespace(BFZ + 'cftag/')
BFDNS = rdflib.Namespace(BFZ + 'dftag/')
VNS = rdflib.Namespace(VERSA_BASEIRI)


def run(inputs=None, base=None, out=None, stats=None, verbose=False):
    logger = logging.getLogger('marc2bfrdf')
    if verbose:
        logger.setLevel(logging.DEBUG)

    ids = marc.idgen(base)
    m = memory.connection()
    g = rdflib.Graph()
    g.bind('bf', BFNS)
    g.bind('bfc', BFCNS)
    g.bind('bfd', BFDNS)
    g.bind('v', VNS)

    def postprocess(rec):
        rdf.process(m, g, logger=logger)
        m.create_space()

    if stats: stats_struct = {}
    for inf in inputs:
        sink = marc.record_handler(m, idbase=base, ids=ids, postprocess=postprocess, stats=stats_struct, logger=logger)
        marcxml.parse_marcxml(inf, sink)

    out.write(g.serialize(format="turtle"))
    json.dump(stats_struct, stats)
    return


if __name__ == '__main__':
    #parser = argparse.ArgumentParser(prog="bootstrap", add_help=False)
    parser = argparse.ArgumentParser()
    parser.add_argument('inputs', type=argparse.FileType('r'), metavar='inputs', nargs='+',
                        help='One or more MARC/XML files to be parsed and converted to BIBFRAME RDF')
    parser.add_argument('-o', '--out', type=argparse.FileType('w'), default=sys.stdout,
        help='file where output should be written '
             '(default: write to stdout)')
    parser.add_argument('-s', '--stats', type=argparse.FileType('w'),
        help='file where statistics output should be written in JSOn format')
    #parser.add_argument('-c', '--config', type=argparse.FileType('r'),
    #    help='config, a Versa file whose config (in the @docheader) should be used to parse the rest')
    parser.add_argument('-b', '--base', metavar="IRI", #dest="base",
        help='Base IRI to be used for creating resources.')
    parser.add_argument('-v', '--verbose', action='store_true',
        help='whether to show additional messages and information')
    #
    args = parser.parse_args()

    run(inputs=args.inputs, base=args.base, out=args.out, stats=args.stats, verbose=args.verbose)
    for f in args.inputs: f.close()
    args.out.close()

